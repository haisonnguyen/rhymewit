{"version":3,"sources":["components/girl.png","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Main","Container","style","height","width","marginTop","Row","Col","Card","className","Body","fontSize","fontWeight","Text","color","backgroundColor","Img","boxShadow","src","girl","md","span","offset","Button","size","App","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","ButtonGroup","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,uQCgD5BC,MAxCf,WACI,OACI,kBAACC,EAAA,EAAD,CAAWC,MAAO,CAAEC,OAAQ,OAAQC,MAAO,QAASC,UAAW,SAC3D,kBAACC,EAAA,EAAD,CAAKJ,MAAO,CAAEC,OAAQ,MAAOC,MAAO,OAAQC,UAAW,OACnD,kBAACE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,UAAU,UAAUP,MAAO,CAAEC,OAAQ,QACvC,kBAACG,EAAA,EAAD,CAAKG,UAAU,6DAA6DP,MAAO,CAAEC,OAAQ,SACzF,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAKE,KAAN,CAAWR,MAAO,CAAES,SAAU,QAASC,WAAY,OAAQT,OAAQ,SAC/D,kBAACK,EAAA,EAAKK,KAAN,CAAWJ,UAAU,YAAYP,MAAO,CAAEC,OAAQ,SAAlD,mCACoC,0BAAMD,MAAO,CAAEY,MAAO,UAAWC,gBAAiB,YAAlD,QADpC,IAEA,6BAAS,6BAFT,OAGA,0BAAMb,MAAO,CAAEY,MAAO,YAAtB,SAA+C,0BAAMZ,MAAO,CAAEY,MAAO,YAAtB,QAH/C,sBAGgH,6BAHhH,YAGkI,0BAAMZ,MAAO,CAAEU,WAAY,OAAQE,MAAO,YAA1C,cAHlI,QAOR,kBAACP,EAAA,EAAD,KACI,kBAACC,EAAA,EAAKQ,IAAN,CAAUd,MAAO,CAAEC,OAAQ,QAASC,MAAO,QAASa,UAAW,qBAAuBC,IAAKC,WAO/G,kBAACb,EAAA,EAAD,CAAKJ,MAAO,CAAEC,OAAQ,MAAOC,MAAO,SAChC,kBAACG,EAAA,EAAD,CAAKa,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IACxB,kBAACC,EAAA,EAAD,CAAQC,KAAK,KAAKtB,MAAO,CAAEa,gBAAiB,YAA5C,qBAKR,kBAACT,EAAA,EAAD,CAAKJ,MAAO,CAAEC,OAAQ,MAAOC,MAAO,SAChC,kBAACG,EAAA,EAAD,CAAKa,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IACxB,kBAAC,IAAD,CAAiBE,KAAM,SCN5BC,MA1Bf,WACE,OACE,yBAAKhB,UAAU,OACb,kBAACiB,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,QAAQC,QAAQ,QAAO5B,MAAO,CAACC,OAAO,SAC5E,kBAACuB,EAAA,EAAOK,MAAR,CAAcC,KAAK,QAAQ9B,MAAO,CAAEY,MAAO,UAAWF,WAAY,SAAlE,YACA,kBAACc,EAAA,EAAOO,OAAR,CAAeC,gBAAc,0BAC7B,kBAACR,EAAA,EAAOS,SAAR,CAAiBC,GAAG,yBAClB,kBAACC,EAAA,EAAD,CAAK5B,UAAU,YAEf,kBAAC4B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAa7B,UAAU,QACrB,kBAACc,EAAA,EAAD,CAAQO,QAAQ,QAAQS,KAAK,UAA7B,UAAsD,KAExD,kBAACD,EAAA,EAAD,CAAa7B,UAAU,QACrB,kBAACc,EAAA,EAAD,CAAQgB,KAAK,SAASrC,MAAO,CAAEa,gBAAiB,YAAhD,WAA8E,QAKtF,kBAAC,EAAD,QChBcyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1b2c4dc2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/girl.a3a111db.png\";","import React from 'react';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Card, Container, Row, Col, Button } from 'react-bootstrap'\r\n\r\nimport { ChevronDownIcon } from '@primer/octicons-react'\r\nimport girl from './girl.png';\r\n\r\nfunction Main() {\r\n    return (\r\n        <Container style={{ height: \"80vh\", width: \"100vw\", marginTop: \"40px\"}}>\r\n            <Row style={{ height: \"70%\", width: \"100%\", marginTop: \"5%\" }}>\r\n                <Col>\r\n                    <Card className=\"shadow \" style={{ height: \"80%\" }}>\r\n                        <Row className=\"no-gutters d-flex justify-content-start align-items-center\" style={{ height: \"100%\" }}>\r\n                            <Col>\r\n                                <Card.Body style={{ fontSize: \"2.3vw\", fontWeight: \"bold\", height: \"100%\" }}>\r\n                                    <Card.Text className=\"text-left\" style={{ height: \"100%\" }}>\r\n                                        Tired of boring quizzes all the <span style={{ color: \"#FFFFFF\", backgroundColor: \"#f26524\", }}>time</span>?\r\n                                    <br></br><br></br>\r\n                                Use <span style={{ color: \"#f26524\" }}>Rhyme</span><span style={{ color: \"#faab53\" }}>wit </span> so students learn <br></br> through <span style={{ fontWeight: \"bold\", color: \"#f26524\" }}>__________</span> .\r\n                                </Card.Text>\r\n                                </Card.Body>\r\n                            </Col>\r\n                            <Col>\r\n                                <Card.Img style={{ height: \"300px\", width: \"300px\", boxShadow: \"20px 20px #f26524\" }} src={girl}>\r\n                                </Card.Img>\r\n                            </Col>\r\n                        </Row>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n            <Row style={{ height: \"10%\", width: \"100%\" }}>\r\n                <Col md={{ span: 6, offset: 3 }}>\r\n                    <Button size=\"lg\" style={{ backgroundColor: \"#24509e\" }}>\r\n                        Try a Rhymequiz\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n            <Row style={{ height: \"10%\", width: \"100%\" }}>\r\n                <Col md={{ span: 6, offset: 3 }}>\r\n                    <ChevronDownIcon size={24} />\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport './App.css';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport { Navbar, Nav, Button, ButtonGroup } from 'react-bootstrap'\r\n\r\nimport Main from \"../src/components/Main\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"light\" variant=\"light\"style={{height:\"10vh\"}}>\r\n        <Navbar.Brand href=\"#home\" style={{ color: \"#f26524\", fontWeight: \"bold\" }}>Rhymewit</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n          </Nav>\r\n          <Nav>\r\n            <ButtonGroup className=\"mr-4\">\r\n              <Button variant=\"light\" type=\"submit\">Log in</Button>{' '}\r\n            </ButtonGroup>\r\n            <ButtonGroup className=\"mr-4\">\r\n              <Button type=\"submit\" style={{ backgroundColor: \"#24509e\" }}>Sign up</Button>{' '}\r\n            </ButtonGroup>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n      <Main>\r\n\r\n      </Main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}